play.server.http.port = disabled
play.server.https.port = 9443
## Configures the keystore to use on production mode. You will probably need to use Env Var
## overrides (https://github.com/lightbend/config#optional-system-or-env-variable-overrides)
play.server.https.keyStore.path = conf/selfsigned.keystore

# http://www.playframework.com/documentation/latest/ApplicationSecret
play.http.secret.key = "lskdflkshdfgkjlhsdjkfhsdkljhfjklsdhf"

## Modules - https://www.playframework.com/documentation/latest/Modules
play.modules {
  # To enable Akka gRPC clients to be @Injected
  # This Module is generated by the Akka gRPC sbt plugin. See your `target/scala-2.12/src_managed` folder.
  enabled += example.myapp.helloworld.grpc.AkkaGrpcClientModule
}

# And we can configure the default target where the gRPC services are expected to run:
# (Alternatively Akka service discovery can be used to discover them)
#
#                   ---------------
#                   |              |
# -- (HTTP/1.1) --> > Controller  --> --+
#                   |              |    |
#                   |              |    |
#         +-------> > gRPC Router  |    |
#         |         |              |    |
#         |         ----------------    |
#         |                             |
#         +------------ (HTTP/2) -------+
#
# The settings below configure the client that consumes "helloworld.GreeterService". Because a `host` and `port`
# are used, the client will directly point there. The `ssl-config` section of the settings is required because when
# running this example application we use a self-signed certificate. Therefore we need to tell the client to trust
# the invalid certificate.
akka.grpc.client {

  "helloworld.GreeterService" {
    # configure ssl to trust our self signed certificate
    host = localhost
    port = 9443

    # configure ssl to trust our self-signed certificate
    ssl-config {
      trustManager = {
        stores = [
          {type = "JKS", path = ${user.dir}/conf/selfsigned.keystore}
        ]
      }
    }

  }


}
